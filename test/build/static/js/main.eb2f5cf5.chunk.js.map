{"version":3,"sources":["components/createOrder/createOrder.js","components/orderStatus/orderStatus.js","components/getOrder/getOrder.js","App.js","serviceWorker.js","index.js"],"names":["createOrder","props","handleSubmit","event","preventDefault","console","log","target","quantityB","value","Order","state","Id","Name","prdId","quantity","axios","post","then","res","data","alert","JSON","stringify","ID","this","setState","elements","name","product","onSubmit","id","type","onChange","handleChangeName","handleChangeId","handleChangeProductId","for","min","max","handleChangeQuantity","Component","orderStatus","user","orderId","handleChangeOrdId","handleChangeOrdStatus","getOrder","get","App","className","to","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb2f5cf5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nclass createOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {ID: \"\", Name: \"\", prdId: \"\", quantity: \"\"};\r\n      }\r\n      handleSubmit = (event) => {\r\n        var quantity = []\r\n        var orderId = ''\r\n        event.preventDefault()\r\n        console.log(event.target.quantityB.value)\r\n        var Order = {\r\n            \"id\" : this.state.Id,\r\n            \"name\" : this.state.Name,\r\n            \"productID\" : this.state.prdId,\r\n            \"productQuantity\" : this.state.quantity,\r\n            \"orderId\" : orderId\r\n        }\r\n        axios.post(`http://127.0.0.1:8081/placeOrder/`, {Order})\r\n        .then(res => {\r\n            if(res.data){\r\n                alert(JSON.stringify(res))\r\n            }\r\n          console.log(res);\r\n        })\r\n      }\r\n    \r\n    handleChangeName(event) {\r\n        this.setState({ Name: event.target.elements.name.value })\r\n      }\r\n    \r\n    handleChangeId(event) {\r\n        this.setState({ ID: event.target.elements.ID.value })\r\n      }\r\n    \r\n    handleChangeQuantity(event) {\r\n        this.setState({ quantity: event.target.elements.quantity.value })\r\n      }\r\n    handleChangeProductId(event) {\r\n        this.setState({ prdId: event.target.elements.product.value })\r\n    }\r\n    render() {\r\n    \r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n        <p>Enter your name:</p>\r\n        <input id='cust_name'\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={this.handleChangeName}\r\n         \r\n        /><br></br><br></br>\r\n        <p>Enter your Id:</p>\r\n        <input id='cust_name'\r\n          type=\"text\"\r\n          name=\"ID\"\r\n          onChange={this.handleChangeId}\r\n         \r\n        /><br></br><br></br>\r\n        <input type=\"radio\" id=\"Burger\" name=\"product\" value=\"Burger\" onChange={this.handleChangeProductId}/>\r\n        <label for=\"Burger\">Burger</label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\" onChange={this.handleChangeQuantity}/>\r\n        <br></br><br></br>\r\n        <input type=\"radio\" id=\"Pizza\" name=\"product\" value=\"Pizza\" onChange={this.handleChangeProductId}/>\r\n        <label for=\"Pizza\">Pizza</label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\" onChange={this.handleChangeQuantity}/>\r\n        <br></br><br></br><input type=\"radio\" id=\"Sandwich\" name=\"product\" value=\"Sandwich\" onChange={this.handleChangeProductId}/>\r\n        <label for=\"Sandwich\">Sandwich</label>&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\" onChange={this.handleChangeQuantity}/>\r\n        <br></br><br></br>\r\n      \r\n        <input\r\n        type='submit'\r\n      />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default createOrder;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nclass orderStatus extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {Id: '', orderId : '', orderStatus: ''};\r\n        console.log(this.state.Id)\r\n      }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n       var user = {\r\n           \"ID\" : this.state.Id,\r\n           \"orderID\" : this.state.orderId,\r\n           \"orderStatus\" : this.state.orderStatus\r\n       }\r\n       axios.post(`http://127.0.0.1:8081/orderStatus/`, {user})\r\n       .then(res => {\r\n           if(res.data){\r\n               alert(JSON.stringify(res))\r\n           }\r\n         console.log(res);\r\n       })\r\n    \r\n     }\r\n     handleChangeId(event) {\r\n        this.setState({ Id: event.target.elements.ID.value })\r\n      }\r\n      handleChangeOrdId(event) {\r\n        this.setState({ Id: event.target.elements.orderId.value })\r\n      }\r\n      handleChangeOrdStatus(event) {\r\n        this.setState({ Id: event.target.elements.orderStatus.value })\r\n      }\r\n    render() {\r\n        return (\r\n        <form onSubmit={this.handleSubmit}>\r\n         <p>Enter your Id:</p>\r\n        <input id='cust_name'\r\n          type=\"text\"\r\n          name=\"ID\"\r\n          onChange={this.handleChangeId}\r\n          \r\n        /><br></br><br></br>\r\n        <p>Enter your order Id:</p>\r\n        <input id='order_name'\r\n          type=\"text\"\r\n          name=\"orderID\"\r\n          onChange={this.handleChangeOrdId}\r\n        /><br></br><br></br>\r\n        <p>Enter your order Status:</p>\r\n        <input id='order_name'\r\n          type=\"text\"\r\n          name=\"orderName\"\r\n          onChange={this.handleChangeOrdStatus}\r\n          \r\n        /><br></br><br></br>\r\n        <input\r\n        type='submit'\r\n      />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default orderStatus;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nclass getOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {ID: \"\"};\r\n      }\r\n      handleSubmit = (event) => {\r\n        event.preventDefault()\r\n       axios.get(`http://127.0.0.1:8081/order/`+this.state.Id+`/`)\r\n       .then(res => {\r\n           if(res.data){\r\n               alert(JSON.stringify(res))\r\n           }\r\n         console.log(res);\r\n       })\r\n       }\r\n    handleChangeId(event) {\r\n        this.setState({ Id: event.target.elements.ID.value })\r\n      }\r\n    render() {\r\n    \r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n        \r\n        <p>Enter your ID to see all your orders!!</p>\r\n        <input id='cust_id'\r\n          type=\"text\"\r\n          name=\"ID\"\r\n          onChange={this.handleChangeId}\r\n          \r\n        /><br></br><br></br>\r\n        \r\n        <input\r\n        type='submit'\r\n      />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default getOrder;","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport 'react-dropdown/style.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport createOrder from './components/createOrder/createOrder';\nimport orderStatus from './components/orderStatus/orderStatus';\nimport getOrder from './components/getOrder/getOrder';\n\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <Router>\n        <div>\n          <h2>Welcome to Your Own Kitchen</h2>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li><Link to={'/createOrder'} className=\"nav-link\"> createOrder </Link></li>\n            <li><Link to={'/orderStatus'} className=\"nav-link\">orderStatus</Link></li>\n            <li><Link to={'/getOrder'} className=\"nav-link\">getOrder</Link></li>\n          </ul>\n          </nav>\n          <hr />\n          <Switch>\n              <Route exact path='/createOrder' component={createOrder} />\n              <Route path='/orderStatus' component={orderStatus} />\n              <Route path='/getOrder' component={getOrder} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}